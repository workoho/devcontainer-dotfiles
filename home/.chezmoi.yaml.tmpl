{{- /* Checks if running interactively, which is not the case for GitHub Codespaces */ -}}
{{- $interactive := stdinIsATTY -}}

{{- /* Initializes the name variable with a default value */ -}}
{{- $name := "Your Name" -}}
{{- $gitCommitterName := env "GIT_COMMITTER_NAME" -}}
{{- /* If name was previously set, reuses it */ -}}
{{- if hasKey . "name" -}}
{{-   $name = .name -}}
{{- /* Otherwise, if GIT_COMMITTER_NAME is set */ -}}
{{- else if and (ne $gitCommitterName nil) (ne $gitCommitterName "") -}}
{{-   $name = $gitCommitterName -}}
{{- /* Otherwise, if running interactively, prompts for a name */ -}}
{{- else if $interactive -}}
{{-   writeToStdout "\n\n                          Terminal dotfile Setup\n" -}}
{{-   writeToStdout "--------------------------------------------------------------------------------\n\n" -}}
{{-   writeToStdout "ℹ️ Answer the following questions so their data can be integrated to your dotfiles afterwards:\n\n" -}}
{{-   $name = promptString "Your full name" $name -}}
{{- end -}}

{{- /* Does the same for the email */ -}}
{{- $email := "your@email.com" -}}
{{- $gitCommitterEmail := env "GIT_COMMITTER_EMAIL" -}}
{{- if hasKey . "email" -}}
{{-   $email = .email -}}
{{- else if and (ne $gitCommitterEmail nil) (ne $gitCommitterEmail "") -}}
{{-   $email = $gitCommitterEmail -}}
{{- else if $interactive -}}
{{-   $email = promptString "Your email address" $email -}}
{{- end -}}

{{- if $interactive -}}
{{-   writeToStdout "💡 Tip: you can re-enter your name and email with `chezmoi init --data=false`.\n\n" -}}
{{- end -}}

sourceDir: "{{ .chezmoi.sourceDir }}"

data:
  name: "{{ $name }}"
  email: "{{ $email }}"

edit:
  command: "code"
  args: [ "--wait" ]

hooks:
  apply:
    pre:
      command: bash
      args:
        - -c
        - |
          GITHUB_API_URL="${GITHUB_API_URL:-"https://api.github.com"}"
          rm -f /tmp/github_user.json*
          echo '{ "id": null }' > /tmp/github_user.json

          if [ -n "$GITHUB_USER" ]; then
              response=$(curl -fsSL -w "%{http_code}" "$GITHUB_API_URL/users/$GITHUB_USER" -o /tmp/github_user.json.tmp)
              if [ "$response" -eq 200 ]; then
                  mv /tmp/github_user.json.tmp /tmp/github_user.json
              else
                  rm -f /tmp/github_user.json.tmp
                  echo "Failed to fetch GitHub user ID. HTTP status code: $response"
                  exit 1
              fi
              GITHUB_USER_ID=$(cat /tmp/github_user.json | jq .id)
              export GITHUB_USER_ID
          fi
